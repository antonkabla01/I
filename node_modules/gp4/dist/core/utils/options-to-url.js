const keys = ['protocol', 'host', 'hostname', 'port', 'pathname', 'search'];
export default function optionsToUrl(origin, options) {
    if (options.path) {
        if (options.pathname || options.search || options.searchParams) {
            throw new TypeError('Parameters `path` is mutually exclusive with `pathname`, `search`, and `searchParams`.');
        }
    }
    if (options.search && options.searchParams) {
        throw new TypeError('Parameters `search` and `searchParams` are mutually exclusive.');
    }
    origin = !origin
        ? !options.protocol
            ? (() => { throw new TypeError('No URL protocol specified'); })()
            : `${options.protocol}//${options.hostname ?? options.host ?? ''}`
        : origin;
    const url = new URL(origin);
    if (options.path) {
        const searchIndex = options.path.indexOf('?');
        options.pathname = searchIndex === -1
            ? options.path
            : options.path.slice(0, searchIndex);
        options.search = searchIndex === -1
            ? undefined
            : options.path.slice(searchIndex + 1);
        delete options.path;
    }
    for (const key of keys) {
        options[key] && (url[key] = options[key].toString());
    }
    return url;
}
