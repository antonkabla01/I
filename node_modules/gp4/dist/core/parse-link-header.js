export default function parseLinkHeader(link) {
    link.split(',').map(item => {
        const [rawUriReference, ...rawLinkParameters] = item.split(';');
        const trimmedUriReference = rawUriReference.trim();
        return trimmedUriReference[0] !== '<' || trimmedUriReference.at(-1) !== '>' 
            ? (() => { throw new Error(`Invalid format of the Link header reference: ${trimmedUriReference}`); })()
            : rawLinkParameters.length === 0 
            ? (() => { throw new Error(`Unexpected end of Link header parameters: ${rawLinkParameters.join(';')}`); })()
            : ({
                reference: trimmedUriReference.slice(1, -1),
                parameters: rawLinkParameters.reduce((params, rawParameter) => {
                    const trimmedRawParameter = rawParameter.trim();
                    const center = trimmedRawParameter.indexOf('=');
                    return center === -1 
                        ? (() => { throw new Error(`Failed to parse Link header: ${link}`); })()
                        : (params[trimmedRawParameter.slice(0, center).trim()] = trimmedRawParameter.slice(center + 1).trim(), params);
                        }, {})
            });
    });
};